=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ElasticEmail::SecurityApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ElasticEmail::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'ElasticEmail::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = ElasticEmail::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# security_apikeys_by_name_delete
#
# Delete ApiKey
# 
# @param string $name Name of the ApiKey (required)
# @param string $subaccount Email of the subaccount of which ApiKey should be deleted (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the ApiKey',
        required => '1',
    },
    'subaccount' => {
        data_type => 'string',
        description => 'Email of the subaccount of which ApiKey should be deleted',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_apikeys_by_name_delete' } = { 
        summary => 'Delete ApiKey',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub security_apikeys_by_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling security_apikeys_by_name_delete");
    }

    # parse inputs
    my $_resource_path = '/security/apikeys/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'subaccount'}) {
        $query_params->{'subaccount'} = $self->{api_client}->to_query_value($args{'subaccount'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# security_apikeys_by_name_get
#
# Load ApiKey
# 
# @param string $name Name of the ApiKey (required)
# @param string $subaccount Email of the subaccount of which ApiKey should be loaded (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the ApiKey',
        required => '1',
    },
    'subaccount' => {
        data_type => 'string',
        description => 'Email of the subaccount of which ApiKey should be loaded',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_apikeys_by_name_get' } = { 
        summary => 'Load ApiKey',
        params => $params,
        returns => 'ApiKey',
        };
}
# @return ApiKey
#
sub security_apikeys_by_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling security_apikeys_by_name_get");
    }

    # parse inputs
    my $_resource_path = '/security/apikeys/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'subaccount'}) {
        $query_params->{'subaccount'} = $self->{api_client}->to_query_value($args{'subaccount'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApiKey', $response);
    return $_response_object;
}

#
# security_apikeys_by_name_put
#
# Update ApiKey
# 
# @param string $name Name of the ApiKey (required)
# @param ApiKeyPayload $api_key_payload  (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the ApiKey',
        required => '1',
    },
    'api_key_payload' => {
        data_type => 'ApiKeyPayload',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_apikeys_by_name_put' } = { 
        summary => 'Update ApiKey',
        params => $params,
        returns => 'ApiKey',
        };
}
# @return ApiKey
#
sub security_apikeys_by_name_put {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling security_apikeys_by_name_put");
    }

    # verify the required parameter 'api_key_payload' is set
    unless (exists $args{'api_key_payload'}) {
      croak("Missing the required parameter 'api_key_payload' when calling security_apikeys_by_name_put");
    }

    # parse inputs
    my $_resource_path = '/security/apikeys/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'api_key_payload'}) {
        $_body_data = $args{'api_key_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ApiKey', $response);
    return $_response_object;
}

#
# security_apikeys_get
#
# List ApiKeys
# 
# @param string $subaccount Email of the subaccount of which ApiKeys should be loaded (optional)
{
    my $params = {
    'subaccount' => {
        data_type => 'string',
        description => 'Email of the subaccount of which ApiKeys should be loaded',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_apikeys_get' } = { 
        summary => 'List ApiKeys',
        params => $params,
        returns => 'ARRAY[ApiKey]',
        };
}
# @return ARRAY[ApiKey]
#
sub security_apikeys_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/security/apikeys';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'subaccount'}) {
        $query_params->{'subaccount'} = $self->{api_client}->to_query_value($args{'subaccount'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ApiKey]', $response);
    return $_response_object;
}

#
# security_apikeys_post
#
# Add ApiKey
# 
# @param ApiKeyPayload $api_key_payload  (required)
{
    my $params = {
    'api_key_payload' => {
        data_type => 'ApiKeyPayload',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_apikeys_post' } = { 
        summary => 'Add ApiKey',
        params => $params,
        returns => 'NewApiKey',
        };
}
# @return NewApiKey
#
sub security_apikeys_post {
    my ($self, %args) = @_;

    # verify the required parameter 'api_key_payload' is set
    unless (exists $args{'api_key_payload'}) {
      croak("Missing the required parameter 'api_key_payload' when calling security_apikeys_post");
    }

    # parse inputs
    my $_resource_path = '/security/apikeys';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'api_key_payload'}) {
        $_body_data = $args{'api_key_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NewApiKey', $response);
    return $_response_object;
}

#
# security_smtp_by_name_delete
#
# Delete SMTP Credential
# 
# @param string $name Name of the SMTP Credential (required)
# @param string $subaccount Email of the subaccount of which credential should be deleted (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the SMTP Credential',
        required => '1',
    },
    'subaccount' => {
        data_type => 'string',
        description => 'Email of the subaccount of which credential should be deleted',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_smtp_by_name_delete' } = { 
        summary => 'Delete SMTP Credential',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub security_smtp_by_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling security_smtp_by_name_delete");
    }

    # parse inputs
    my $_resource_path = '/security/smtp/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'subaccount'}) {
        $query_params->{'subaccount'} = $self->{api_client}->to_query_value($args{'subaccount'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# security_smtp_by_name_get
#
# Load SMTP Credential
# 
# @param string $name Name of the SMTP Credential (required)
# @param string $subaccount Email of the subaccount of which credential should be loaded (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the SMTP Credential',
        required => '1',
    },
    'subaccount' => {
        data_type => 'string',
        description => 'Email of the subaccount of which credential should be loaded',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_smtp_by_name_get' } = { 
        summary => 'Load SMTP Credential',
        params => $params,
        returns => 'SmtpCredentials',
        };
}
# @return SmtpCredentials
#
sub security_smtp_by_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling security_smtp_by_name_get");
    }

    # parse inputs
    my $_resource_path = '/security/smtp/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'subaccount'}) {
        $query_params->{'subaccount'} = $self->{api_client}->to_query_value($args{'subaccount'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SmtpCredentials', $response);
    return $_response_object;
}

#
# security_smtp_by_name_put
#
# Update SMTP Credential
# 
# @param string $name Name of the SMTP Credential (required)
# @param SmtpCredentialsPayload $smtp_credentials_payload  (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the SMTP Credential',
        required => '1',
    },
    'smtp_credentials_payload' => {
        data_type => 'SmtpCredentialsPayload',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_smtp_by_name_put' } = { 
        summary => 'Update SMTP Credential',
        params => $params,
        returns => 'SmtpCredentials',
        };
}
# @return SmtpCredentials
#
sub security_smtp_by_name_put {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling security_smtp_by_name_put");
    }

    # verify the required parameter 'smtp_credentials_payload' is set
    unless (exists $args{'smtp_credentials_payload'}) {
      croak("Missing the required parameter 'smtp_credentials_payload' when calling security_smtp_by_name_put");
    }

    # parse inputs
    my $_resource_path = '/security/smtp/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'smtp_credentials_payload'}) {
        $_body_data = $args{'smtp_credentials_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SmtpCredentials', $response);
    return $_response_object;
}

#
# security_smtp_get
#
# List SMTP Credentials
# 
# @param string $subaccount Email of the subaccount of which credentials should be listed (optional)
{
    my $params = {
    'subaccount' => {
        data_type => 'string',
        description => 'Email of the subaccount of which credentials should be listed',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_smtp_get' } = { 
        summary => 'List SMTP Credentials',
        params => $params,
        returns => 'ARRAY[SmtpCredentials]',
        };
}
# @return ARRAY[SmtpCredentials]
#
sub security_smtp_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/security/smtp';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'subaccount'}) {
        $query_params->{'subaccount'} = $self->{api_client}->to_query_value($args{'subaccount'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SmtpCredentials]', $response);
    return $_response_object;
}

#
# security_smtp_post
#
# Add SMTP Credential
# 
# @param SmtpCredentialsPayload $smtp_credentials_payload  (required)
{
    my $params = {
    'smtp_credentials_payload' => {
        data_type => 'SmtpCredentialsPayload',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'security_smtp_post' } = { 
        summary => 'Add SMTP Credential',
        params => $params,
        returns => 'NewSmtpCredentials',
        };
}
# @return NewSmtpCredentials
#
sub security_smtp_post {
    my ($self, %args) = @_;

    # verify the required parameter 'smtp_credentials_payload' is set
    unless (exists $args{'smtp_credentials_payload'}) {
      croak("Missing the required parameter 'smtp_credentials_payload' when calling security_smtp_post");
    }

    # parse inputs
    my $_resource_path = '/security/smtp';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'smtp_credentials_payload'}) {
        $_body_data = $args{'smtp_credentials_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('NewSmtpCredentials', $response);
    return $_response_object;
}

1;
