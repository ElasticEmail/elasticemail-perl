=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ElasticEmail::DomainsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ElasticEmail::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'ElasticEmail::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = ElasticEmail::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# domains_by_domain_delete
#
# Delete Domain
#
# @param string $domain Name of the given domain (required)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'Name of the given domain',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'domains_by_domain_delete' } = {
        summary => 'Delete Domain',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub domains_by_domain_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling domains_by_domain_delete");
    }

    # parse inputs
    my $_resource_path = '/domains/{domain}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# domains_by_domain_get
#
# Load Domain
#
# @param string $domain Name of the given domain (required)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'Name of the given domain',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'domains_by_domain_get' } = {
        summary => 'Load Domain',
        params => $params,
        returns => 'DomainData',
        };
}
# @return DomainData
#
sub domains_by_domain_get {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling domains_by_domain_get");
    }

    # parse inputs
    my $_resource_path = '/domains/{domain}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DomainData', $response);
    return $_response_object;
}

#
# domains_by_domain_put
#
# Update Domain
#
# @param string $domain Name of the given domain (required)
# @param DomainUpdatePayload $domain_update_payload Updated Domain resource (required)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'Name of the given domain',
        required => '1',
    },
    'domain_update_payload' => {
        data_type => 'DomainUpdatePayload',
        description => 'Updated Domain resource',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'domains_by_domain_put' } = {
        summary => 'Update Domain',
        params => $params,
        returns => 'DomainDetail',
        };
}
# @return DomainDetail
#
sub domains_by_domain_put {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling domains_by_domain_put");
    }

    # verify the required parameter 'domain_update_payload' is set
    unless (exists $args{'domain_update_payload'}) {
      croak("Missing the required parameter 'domain_update_payload' when calling domains_by_domain_put");
    }

    # parse inputs
    my $_resource_path = '/domains/{domain}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'domain_update_payload'}) {
        $_body_data = $args{'domain_update_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DomainDetail', $response);
    return $_response_object;
}

#
# domains_by_domain_restricted_get
#
# Check for domain restriction
#
# @param string $domain Name of the given domain (required)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'Name of the given domain',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'domains_by_domain_restricted_get' } = {
        summary => 'Check for domain restriction',
        params => $params,
        returns => 'boolean',
        };
}
# @return boolean
#
sub domains_by_domain_restricted_get {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling domains_by_domain_restricted_get");
    }

    # parse inputs
    my $_resource_path = '/domains/{domain}/restricted';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('boolean', $response);
    return $_response_object;
}

#
# domains_by_domain_verification_put
#
# Verify Domain
#
# @param string $domain Name of the given domain (required)
# @param string $body Tracking type used in the Tracking verification (required)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'Name of the given domain',
        required => '1',
    },
    'body' => {
        data_type => 'string',
        description => 'Tracking type used in the Tracking verification',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'domains_by_domain_verification_put' } = {
        summary => 'Verify Domain',
        params => $params,
        returns => 'DomainData',
        };
}
# @return DomainData
#
sub domains_by_domain_verification_put {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling domains_by_domain_verification_put");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling domains_by_domain_verification_put");
    }

    # parse inputs
    my $_resource_path = '/domains/{domain}/verification';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DomainData', $response);
    return $_response_object;
}

#
# domains_by_email_default_patch
#
# Set Default
#
# @param string $email Default email sender, example: mail@yourdomain.com (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Default email sender, example: mail@yourdomain.com',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'domains_by_email_default_patch' } = {
        summary => 'Set Default',
        params => $params,
        returns => 'DomainDetail',
        };
}
# @return DomainDetail
#
sub domains_by_email_default_patch {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling domains_by_email_default_patch");
    }

    # parse inputs
    my $_resource_path = '/domains/{email}/default';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DomainDetail', $response);
    return $_response_object;
}

#
# domains_get
#
# Load Domains
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'domains_get' } = {
        summary => 'Load Domains',
        params => $params,
        returns => 'ARRAY[DomainDetail]',
        };
}
# @return ARRAY[DomainDetail]
#
sub domains_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/domains';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DomainDetail]', $response);
    return $_response_object;
}

#
# domains_post
#
# Add Domain
#
# @param DomainPayload $domain_payload Domain to add (required)
{
    my $params = {
    'domain_payload' => {
        data_type => 'DomainPayload',
        description => 'Domain to add',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'domains_post' } = {
        summary => 'Add Domain',
        params => $params,
        returns => 'DomainDetail',
        };
}
# @return DomainDetail
#
sub domains_post {
    my ($self, %args) = @_;

    # verify the required parameter 'domain_payload' is set
    unless (exists $args{'domain_payload'}) {
      croak("Missing the required parameter 'domain_payload' when calling domains_post");
    }

    # parse inputs
    my $_resource_path = '/domains';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'domain_payload'}) {
        $_body_data = $args{'domain_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DomainDetail', $response);
    return $_response_object;
}

1;
