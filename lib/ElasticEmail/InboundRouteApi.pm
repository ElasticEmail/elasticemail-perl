=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ElasticEmail::InboundRouteApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ElasticEmail::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'ElasticEmail::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = ElasticEmail::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# inboundroute_by_id_delete
#
# Delete Route
#
# @param string $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'inboundroute_by_id_delete' } = {
        summary => 'Delete Route',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub inboundroute_by_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling inboundroute_by_id_delete");
    }

    # parse inputs
    my $_resource_path = '/inboundroute/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# inboundroute_by_id_get
#
# Get Route
#
# @param string $id ID number of your attachment (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID number of your attachment',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'inboundroute_by_id_get' } = {
        summary => 'Get Route',
        params => $params,
        returns => 'InboundRoute',
        };
}
# @return InboundRoute
#
sub inboundroute_by_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling inboundroute_by_id_get");
    }

    # parse inputs
    my $_resource_path = '/inboundroute/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboundRoute', $response);
    return $_response_object;
}

#
# inboundroute_by_id_put
#
# Update Route
#
# @param string $id  (required)
# @param InboundPayload $inbound_payload  (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'inbound_payload' => {
        data_type => 'InboundPayload',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'inboundroute_by_id_put' } = {
        summary => 'Update Route',
        params => $params,
        returns => 'InboundRoute',
        };
}
# @return InboundRoute
#
sub inboundroute_by_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling inboundroute_by_id_put");
    }

    # verify the required parameter 'inbound_payload' is set
    unless (exists $args{'inbound_payload'}) {
      croak("Missing the required parameter 'inbound_payload' when calling inboundroute_by_id_put");
    }

    # parse inputs
    my $_resource_path = '/inboundroute/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'inbound_payload'}) {
        $_body_data = $args{'inbound_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboundRoute', $response);
    return $_response_object;
}

#
# inboundroute_get
#
# Get Routes
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'inboundroute_get' } = {
        summary => 'Get Routes',
        params => $params,
        returns => 'ARRAY[InboundRoute]',
        };
}
# @return ARRAY[InboundRoute]
#
sub inboundroute_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inboundroute';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[InboundRoute]', $response);
    return $_response_object;
}

#
# inboundroute_order_put
#
# Update Sorting
#
# @param ARRAY[SortOrderItem] $sort_order_item Change the ordering of inbound routes for when matching the inbound (required)
{
    my $params = {
    'sort_order_item' => {
        data_type => 'ARRAY[SortOrderItem]',
        description => 'Change the ordering of inbound routes for when matching the inbound',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'inboundroute_order_put' } = {
        summary => 'Update Sorting',
        params => $params,
        returns => 'ARRAY[InboundRoute]',
        };
}
# @return ARRAY[InboundRoute]
#
sub inboundroute_order_put {
    my ($self, %args) = @_;

    # verify the required parameter 'sort_order_item' is set
    unless (exists $args{'sort_order_item'}) {
      croak("Missing the required parameter 'sort_order_item' when calling inboundroute_order_put");
    }

    # parse inputs
    my $_resource_path = '/inboundroute/order';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'sort_order_item'}) {
        $_body_data = $args{'sort_order_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[InboundRoute]', $response);
    return $_response_object;
}

#
# inboundroute_post
#
# Create Route
#
# @param InboundPayload $inbound_payload  (required)
{
    my $params = {
    'inbound_payload' => {
        data_type => 'InboundPayload',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'inboundroute_post' } = {
        summary => 'Create Route',
        params => $params,
        returns => 'InboundRoute',
        };
}
# @return InboundRoute
#
sub inboundroute_post {
    my ($self, %args) = @_;

    # verify the required parameter 'inbound_payload' is set
    unless (exists $args{'inbound_payload'}) {
      croak("Missing the required parameter 'inbound_payload' when calling inboundroute_post");
    }

    # parse inputs
    my $_resource_path = '/inboundroute';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'inbound_payload'}) {
        $_body_data = $args{'inbound_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InboundRoute', $response);
    return $_response_object;
}

1;
