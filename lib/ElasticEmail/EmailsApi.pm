=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ElasticEmail::EmailsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ElasticEmail::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'ElasticEmail::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = ElasticEmail::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# emails_by_msgid_view_get
#
# View Email
#
# @param string $msgid Message identifier (required)
{
    my $params = {
    'msgid' => {
        data_type => 'string',
        description => 'Message identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'emails_by_msgid_view_get' } = {
        summary => 'View Email',
        params => $params,
        returns => 'EmailData',
        };
}
# @return EmailData
#
sub emails_by_msgid_view_get {
    my ($self, %args) = @_;

    # verify the required parameter 'msgid' is set
    unless (exists $args{'msgid'}) {
      croak("Missing the required parameter 'msgid' when calling emails_by_msgid_view_get");
    }

    # parse inputs
    my $_resource_path = '/emails/{msgid}/view';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'msgid'}) {
        my $_base_variable = "{" . "msgid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'msgid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailData', $response);
    return $_response_object;
}

#
# emails_by_transactionid_status_get
#
# Get Status
#
# @param string $transactionid Transaction identifier (required)
# @param boolean $show_failed Include Bounced email addresses. (optional, default to false)
# @param boolean $show_sent Include Sent email addresses. (optional, default to false)
# @param boolean $show_delivered Include all delivered email addresses. (optional, default to false)
# @param boolean $show_pending Include Ready to send email addresses. (optional, default to false)
# @param boolean $show_opened Include Opened email addresses. (optional, default to false)
# @param boolean $show_clicked Include Clicked email addresses. (optional, default to false)
# @param boolean $show_abuse Include Reported as abuse email addresses. (optional, default to false)
# @param boolean $show_unsubscribed Include Unsubscribed email addresses. (optional, default to false)
# @param boolean $show_errors Include error messages for bounced emails. (optional, default to false)
# @param boolean $show_message_ids Include all MessageIDs for this transaction (optional, default to false)
{
    my $params = {
    'transactionid' => {
        data_type => 'string',
        description => 'Transaction identifier',
        required => '1',
    },
    'show_failed' => {
        data_type => 'boolean',
        description => 'Include Bounced email addresses.',
        required => '0',
    },
    'show_sent' => {
        data_type => 'boolean',
        description => 'Include Sent email addresses.',
        required => '0',
    },
    'show_delivered' => {
        data_type => 'boolean',
        description => 'Include all delivered email addresses.',
        required => '0',
    },
    'show_pending' => {
        data_type => 'boolean',
        description => 'Include Ready to send email addresses.',
        required => '0',
    },
    'show_opened' => {
        data_type => 'boolean',
        description => 'Include Opened email addresses.',
        required => '0',
    },
    'show_clicked' => {
        data_type => 'boolean',
        description => 'Include Clicked email addresses.',
        required => '0',
    },
    'show_abuse' => {
        data_type => 'boolean',
        description => 'Include Reported as abuse email addresses.',
        required => '0',
    },
    'show_unsubscribed' => {
        data_type => 'boolean',
        description => 'Include Unsubscribed email addresses.',
        required => '0',
    },
    'show_errors' => {
        data_type => 'boolean',
        description => 'Include error messages for bounced emails.',
        required => '0',
    },
    'show_message_ids' => {
        data_type => 'boolean',
        description => 'Include all MessageIDs for this transaction',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'emails_by_transactionid_status_get' } = {
        summary => 'Get Status',
        params => $params,
        returns => 'EmailJobStatus',
        };
}
# @return EmailJobStatus
#
sub emails_by_transactionid_status_get {
    my ($self, %args) = @_;

    # verify the required parameter 'transactionid' is set
    unless (exists $args{'transactionid'}) {
      croak("Missing the required parameter 'transactionid' when calling emails_by_transactionid_status_get");
    }

    # parse inputs
    my $_resource_path = '/emails/{transactionid}/status';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'show_failed'}) {
        $query_params->{'showFailed'} = $self->{api_client}->to_query_value($args{'show_failed'});
    }

    # query params
    if ( exists $args{'show_sent'}) {
        $query_params->{'showSent'} = $self->{api_client}->to_query_value($args{'show_sent'});
    }

    # query params
    if ( exists $args{'show_delivered'}) {
        $query_params->{'showDelivered'} = $self->{api_client}->to_query_value($args{'show_delivered'});
    }

    # query params
    if ( exists $args{'show_pending'}) {
        $query_params->{'showPending'} = $self->{api_client}->to_query_value($args{'show_pending'});
    }

    # query params
    if ( exists $args{'show_opened'}) {
        $query_params->{'showOpened'} = $self->{api_client}->to_query_value($args{'show_opened'});
    }

    # query params
    if ( exists $args{'show_clicked'}) {
        $query_params->{'showClicked'} = $self->{api_client}->to_query_value($args{'show_clicked'});
    }

    # query params
    if ( exists $args{'show_abuse'}) {
        $query_params->{'showAbuse'} = $self->{api_client}->to_query_value($args{'show_abuse'});
    }

    # query params
    if ( exists $args{'show_unsubscribed'}) {
        $query_params->{'showUnsubscribed'} = $self->{api_client}->to_query_value($args{'show_unsubscribed'});
    }

    # query params
    if ( exists $args{'show_errors'}) {
        $query_params->{'showErrors'} = $self->{api_client}->to_query_value($args{'show_errors'});
    }

    # query params
    if ( exists $args{'show_message_ids'}) {
        $query_params->{'showMessageIDs'} = $self->{api_client}->to_query_value($args{'show_message_ids'});
    }

    # path params
    if ( exists $args{'transactionid'}) {
        my $_base_variable = "{" . "transactionid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'transactionid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailJobStatus', $response);
    return $_response_object;
}

#
# emails_mergefile_post
#
# Send Bulk Emails CSV
#
# @param MergeEmailPayload $merge_email_payload Email data (required)
{
    my $params = {
    'merge_email_payload' => {
        data_type => 'MergeEmailPayload',
        description => 'Email data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'emails_mergefile_post' } = {
        summary => 'Send Bulk Emails CSV',
        params => $params,
        returns => 'EmailSend',
        };
}
# @return EmailSend
#
sub emails_mergefile_post {
    my ($self, %args) = @_;

    # verify the required parameter 'merge_email_payload' is set
    unless (exists $args{'merge_email_payload'}) {
      croak("Missing the required parameter 'merge_email_payload' when calling emails_mergefile_post");
    }

    # parse inputs
    my $_resource_path = '/emails/mergefile';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'merge_email_payload'}) {
        $_body_data = $args{'merge_email_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailSend', $response);
    return $_response_object;
}

#
# emails_post
#
# Send Bulk Emails
#
# @param EmailMessageData $email_message_data Email data (required)
{
    my $params = {
    'email_message_data' => {
        data_type => 'EmailMessageData',
        description => 'Email data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'emails_post' } = {
        summary => 'Send Bulk Emails',
        params => $params,
        returns => 'EmailSend',
        };
}
# @return EmailSend
#
sub emails_post {
    my ($self, %args) = @_;

    # verify the required parameter 'email_message_data' is set
    unless (exists $args{'email_message_data'}) {
      croak("Missing the required parameter 'email_message_data' when calling emails_post");
    }

    # parse inputs
    my $_resource_path = '/emails';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'email_message_data'}) {
        $_body_data = $args{'email_message_data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailSend', $response);
    return $_response_object;
}

#
# emails_transactional_post
#
# Send Transactional Email
#
# @param EmailTransactionalMessageData $email_transactional_message_data Email data (required)
{
    my $params = {
    'email_transactional_message_data' => {
        data_type => 'EmailTransactionalMessageData',
        description => 'Email data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'emails_transactional_post' } = {
        summary => 'Send Transactional Email',
        params => $params,
        returns => 'EmailSend',
        };
}
# @return EmailSend
#
sub emails_transactional_post {
    my ($self, %args) = @_;

    # verify the required parameter 'email_transactional_message_data' is set
    unless (exists $args{'email_transactional_message_data'}) {
      croak("Missing the required parameter 'email_transactional_message_data' when calling emails_transactional_post");
    }

    # parse inputs
    my $_resource_path = '/emails/transactional';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'email_transactional_message_data'}) {
        $_body_data = $args{'email_transactional_message_data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailSend', $response);
    return $_response_object;
}

1;
