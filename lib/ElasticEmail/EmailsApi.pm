=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ElasticEmail::EmailsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ElasticEmail::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'ElasticEmail::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = ElasticEmail::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# emails_by_msgid_view_get
#
# View Email
# 
# @param string $msgid Message identifier (required)
{
    my $params = {
    'msgid' => {
        data_type => 'string',
        description => 'Message identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'emails_by_msgid_view_get' } = { 
        summary => 'View Email',
        params => $params,
        returns => 'EmailData',
        };
}
# @return EmailData
#
sub emails_by_msgid_view_get {
    my ($self, %args) = @_;

    # verify the required parameter 'msgid' is set
    unless (exists $args{'msgid'}) {
      croak("Missing the required parameter 'msgid' when calling emails_by_msgid_view_get");
    }

    # parse inputs
    my $_resource_path = '/emails/{msgid}/view';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'msgid'}) {
        my $_base_variable = "{" . "msgid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'msgid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailData', $response);
    return $_response_object;
}

#
# emails_mergefile_post
#
# Send Bulk Emails CSV
# 
# @param MergeEmailPayload $merge_email_payload Email data (required)
{
    my $params = {
    'merge_email_payload' => {
        data_type => 'MergeEmailPayload',
        description => 'Email data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'emails_mergefile_post' } = { 
        summary => 'Send Bulk Emails CSV',
        params => $params,
        returns => 'EmailSend',
        };
}
# @return EmailSend
#
sub emails_mergefile_post {
    my ($self, %args) = @_;

    # verify the required parameter 'merge_email_payload' is set
    unless (exists $args{'merge_email_payload'}) {
      croak("Missing the required parameter 'merge_email_payload' when calling emails_mergefile_post");
    }

    # parse inputs
    my $_resource_path = '/emails/mergefile';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'merge_email_payload'}) {
        $_body_data = $args{'merge_email_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailSend', $response);
    return $_response_object;
}

#
# emails_post
#
# Send Bulk Emails
# 
# @param EmailMessageData $email_message_data Email data (required)
{
    my $params = {
    'email_message_data' => {
        data_type => 'EmailMessageData',
        description => 'Email data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'emails_post' } = { 
        summary => 'Send Bulk Emails',
        params => $params,
        returns => 'EmailSend',
        };
}
# @return EmailSend
#
sub emails_post {
    my ($self, %args) = @_;

    # verify the required parameter 'email_message_data' is set
    unless (exists $args{'email_message_data'}) {
      croak("Missing the required parameter 'email_message_data' when calling emails_post");
    }

    # parse inputs
    my $_resource_path = '/emails';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'email_message_data'}) {
        $_body_data = $args{'email_message_data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailSend', $response);
    return $_response_object;
}

#
# emails_transactional_post
#
# Send Transactional Email
# 
# @param EmailTransactionalMessageData $email_transactional_message_data Email data (required)
{
    my $params = {
    'email_transactional_message_data' => {
        data_type => 'EmailTransactionalMessageData',
        description => 'Email data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'emails_transactional_post' } = { 
        summary => 'Send Transactional Email',
        params => $params,
        returns => 'EmailSend',
        };
}
# @return EmailSend
#
sub emails_transactional_post {
    my ($self, %args) = @_;

    # verify the required parameter 'email_transactional_message_data' is set
    unless (exists $args{'email_transactional_message_data'}) {
      croak("Missing the required parameter 'email_transactional_message_data' when calling emails_transactional_post");
    }

    # parse inputs
    my $_resource_path = '/emails/transactional';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'email_transactional_message_data'}) {
        $_body_data = $args{'email_transactional_message_data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailSend', $response);
    return $_response_object;
}

1;
