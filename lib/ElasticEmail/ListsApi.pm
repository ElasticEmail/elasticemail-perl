=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ElasticEmail::ListsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ElasticEmail::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'ElasticEmail::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = ElasticEmail::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# lists_by_name_contacts_post
#
# Add Contacts to List
# 
# @param string $name Name of your list. (required)
# @param EmailsPayload $emails_payload Provide either rule or a list of emails, not both. (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of your list.',
        required => '1',
    },
    'emails_payload' => {
        data_type => 'EmailsPayload',
        description => 'Provide either rule or a list of emails, not both.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_by_name_contacts_post' } = { 
        summary => 'Add Contacts to List',
        params => $params,
        returns => 'ContactsList',
        };
}
# @return ContactsList
#
sub lists_by_name_contacts_post {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling lists_by_name_contacts_post");
    }

    # verify the required parameter 'emails_payload' is set
    unless (exists $args{'emails_payload'}) {
      croak("Missing the required parameter 'emails_payload' when calling lists_by_name_contacts_post");
    }

    # parse inputs
    my $_resource_path = '/lists/{name}/contacts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'emails_payload'}) {
        $_body_data = $args{'emails_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContactsList', $response);
    return $_response_object;
}

#
# lists_by_name_contacts_remove_post
#
# Remove Contacts from List
# 
# @param string $name Name of your list. (required)
# @param EmailsPayload $emails_payload Provide either rule or a list of emails, not both. (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of your list.',
        required => '1',
    },
    'emails_payload' => {
        data_type => 'EmailsPayload',
        description => 'Provide either rule or a list of emails, not both.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_by_name_contacts_remove_post' } = { 
        summary => 'Remove Contacts from List',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub lists_by_name_contacts_remove_post {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling lists_by_name_contacts_remove_post");
    }

    # verify the required parameter 'emails_payload' is set
    unless (exists $args{'emails_payload'}) {
      croak("Missing the required parameter 'emails_payload' when calling lists_by_name_contacts_remove_post");
    }

    # parse inputs
    my $_resource_path = '/lists/{name}/contacts/remove';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'emails_payload'}) {
        $_body_data = $args{'emails_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# lists_by_name_delete
#
# Delete List
# 
# @param string $name Name of your list. (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of your list.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_by_name_delete' } = { 
        summary => 'Delete List',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub lists_by_name_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling lists_by_name_delete");
    }

    # parse inputs
    my $_resource_path = '/lists/{name}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# lists_by_name_get
#
# Load List
# 
# @param string $name Name of your list. (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of your list.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_by_name_get' } = { 
        summary => 'Load List',
        params => $params,
        returns => 'ContactsList',
        };
}
# @return ContactsList
#
sub lists_by_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling lists_by_name_get");
    }

    # parse inputs
    my $_resource_path = '/lists/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContactsList', $response);
    return $_response_object;
}

#
# lists_by_name_put
#
# Update List
# 
# @param string $name Name of your list. (required)
# @param ListUpdatePayload $list_update_payload  (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of your list.',
        required => '1',
    },
    'list_update_payload' => {
        data_type => 'ListUpdatePayload',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_by_name_put' } = { 
        summary => 'Update List',
        params => $params,
        returns => 'ContactsList',
        };
}
# @return ContactsList
#
sub lists_by_name_put {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling lists_by_name_put");
    }

    # verify the required parameter 'list_update_payload' is set
    unless (exists $args{'list_update_payload'}) {
      croak("Missing the required parameter 'list_update_payload' when calling lists_by_name_put");
    }

    # parse inputs
    my $_resource_path = '/lists/{name}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'list_update_payload'}) {
        $_body_data = $args{'list_update_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContactsList', $response);
    return $_response_object;
}

#
# lists_get
#
# Load Lists
# 
# @param int $limit Maximum number of returned items. (optional)
# @param int $offset How many items should be returned ahead. (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'Maximum number of returned items.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'How many items should be returned ahead.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_get' } = { 
        summary => 'Load Lists',
        params => $params,
        returns => 'ARRAY[ContactsList]',
        };
}
# @return ARRAY[ContactsList]
#
sub lists_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/lists';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ContactsList]', $response);
    return $_response_object;
}

#
# lists_post
#
# Add List
# 
# @param ListPayload $list_payload  (required)
{
    my $params = {
    'list_payload' => {
        data_type => 'ListPayload',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_post' } = { 
        summary => 'Add List',
        params => $params,
        returns => 'ContactsList',
        };
}
# @return ContactsList
#
sub lists_post {
    my ($self, %args) = @_;

    # verify the required parameter 'list_payload' is set
    unless (exists $args{'list_payload'}) {
      croak("Missing the required parameter 'list_payload' when calling lists_post");
    }

    # parse inputs
    my $_resource_path = '/lists';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'list_payload'}) {
        $_body_data = $args{'list_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContactsList', $response);
    return $_response_object;
}

1;
