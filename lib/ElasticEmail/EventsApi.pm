=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ElasticEmail::EventsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ElasticEmail::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'ElasticEmail::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = ElasticEmail::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# events_by_transactionid_get
#
# Load Email Events
#
# @param string $transactionid ID number of transaction (required)
# @param DateTime $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
# @param DateTime $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
# @param EventsOrderBy $order_by  (optional)
# @param int $limit Maximum number of returned items. (optional)
# @param int $offset How many items should be returned ahead. (optional)
{
    my $params = {
    'transactionid' => {
        data_type => 'string',
        description => 'ID number of transaction',
        required => '1',
    },
    'from' => {
        data_type => 'DateTime',
        description => 'Starting date for search in YYYY-MM-DDThh:mm:ss format.',
        required => '0',
    },
    'to' => {
        data_type => 'DateTime',
        description => 'Ending date for search in YYYY-MM-DDThh:mm:ss format.',
        required => '0',
    },
    'order_by' => {
        data_type => 'EventsOrderBy',
        description => '',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Maximum number of returned items.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'How many items should be returned ahead.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'events_by_transactionid_get' } = {
        summary => 'Load Email Events',
        params => $params,
        returns => 'ARRAY[RecipientEvent]',
        };
}
# @return ARRAY[RecipientEvent]
#
sub events_by_transactionid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'transactionid' is set
    unless (exists $args{'transactionid'}) {
      croak("Missing the required parameter 'transactionid' when calling events_by_transactionid_get");
    }

    # parse inputs
    my $_resource_path = '/events/{transactionid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # path params
    if ( exists $args{'transactionid'}) {
        my $_base_variable = "{" . "transactionid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'transactionid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[RecipientEvent]', $response);
    return $_response_object;
}

#
# events_channels_by_name_export_post
#
# Export Channel Events
#
# @param string $name Name of selected channel. (required)
# @param ARRAY[EventType] $event_types Types of Events to return (optional)
# @param DateTime $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
# @param DateTime $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
# @param ExportFileFormats $file_format Format of the exported file (optional)
# @param CompressionFormat $compression_format FileResponse compression format. None or Zip. (optional)
# @param string $file_name Name of your file including extension. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of selected channel.',
        required => '1',
    },
    'event_types' => {
        data_type => 'ARRAY[EventType]',
        description => 'Types of Events to return',
        required => '0',
    },
    'from' => {
        data_type => 'DateTime',
        description => 'Starting date for search in YYYY-MM-DDThh:mm:ss format.',
        required => '0',
    },
    'to' => {
        data_type => 'DateTime',
        description => 'Ending date for search in YYYY-MM-DDThh:mm:ss format.',
        required => '0',
    },
    'file_format' => {
        data_type => 'ExportFileFormats',
        description => 'Format of the exported file',
        required => '0',
    },
    'compression_format' => {
        data_type => 'CompressionFormat',
        description => 'FileResponse compression format. None or Zip.',
        required => '0',
    },
    'file_name' => {
        data_type => 'string',
        description => 'Name of your file including extension.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'events_channels_by_name_export_post' } = {
        summary => 'Export Channel Events',
        params => $params,
        returns => 'ExportLink',
        };
}
# @return ExportLink
#
sub events_channels_by_name_export_post {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling events_channels_by_name_export_post");
    }

    # parse inputs
    my $_resource_path = '/events/channels/{name}/export';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'event_types'}) {
        $query_params->{'eventTypes'} = $self->{api_client}->to_query_value($args{'event_types'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'file_format'}) {
        $query_params->{'fileFormat'} = $self->{api_client}->to_query_value($args{'file_format'});
    }

    # query params
    if ( exists $args{'compression_format'}) {
        $query_params->{'compressionFormat'} = $self->{api_client}->to_query_value($args{'compression_format'});
    }

    # query params
    if ( exists $args{'file_name'}) {
        $query_params->{'fileName'} = $self->{api_client}->to_query_value($args{'file_name'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExportLink', $response);
    return $_response_object;
}

#
# events_channels_by_name_get
#
# Load Channel Events
#
# @param string $name Name of selected channel. (required)
# @param ARRAY[EventType] $event_types Types of Events to return (optional)
# @param DateTime $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
# @param DateTime $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
# @param EventsOrderBy $order_by  (optional)
# @param int $limit How many items to load. Maximum for this request is 1000 items (optional)
# @param int $offset How many items should be returned ahead. (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of selected channel.',
        required => '1',
    },
    'event_types' => {
        data_type => 'ARRAY[EventType]',
        description => 'Types of Events to return',
        required => '0',
    },
    'from' => {
        data_type => 'DateTime',
        description => 'Starting date for search in YYYY-MM-DDThh:mm:ss format.',
        required => '0',
    },
    'to' => {
        data_type => 'DateTime',
        description => 'Ending date for search in YYYY-MM-DDThh:mm:ss format.',
        required => '0',
    },
    'order_by' => {
        data_type => 'EventsOrderBy',
        description => '',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many items to load. Maximum for this request is 1000 items',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'How many items should be returned ahead.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'events_channels_by_name_get' } = {
        summary => 'Load Channel Events',
        params => $params,
        returns => 'ARRAY[RecipientEvent]',
        };
}
# @return ARRAY[RecipientEvent]
#
sub events_channels_by_name_get {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling events_channels_by_name_get");
    }

    # parse inputs
    my $_resource_path = '/events/channels/{name}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'event_types'}) {
        $query_params->{'eventTypes'} = $self->{api_client}->to_query_value($args{'event_types'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[RecipientEvent]', $response);
    return $_response_object;
}

#
# events_channels_export_by_id_status_get
#
# Check Channel Export Status
#
# @param string $id ID of the exported file (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of the exported file',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'events_channels_export_by_id_status_get' } = {
        summary => 'Check Channel Export Status',
        params => $params,
        returns => 'ExportStatus',
        };
}
# @return ExportStatus
#
sub events_channels_export_by_id_status_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling events_channels_export_by_id_status_get");
    }

    # parse inputs
    my $_resource_path = '/events/channels/export/{id}/status';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExportStatus', $response);
    return $_response_object;
}

#
# events_export_by_id_status_get
#
# Check Export Status
#
# @param string $id ID of the exported file (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of the exported file',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'events_export_by_id_status_get' } = {
        summary => 'Check Export Status',
        params => $params,
        returns => 'ExportStatus',
        };
}
# @return ExportStatus
#
sub events_export_by_id_status_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling events_export_by_id_status_get");
    }

    # parse inputs
    my $_resource_path = '/events/export/{id}/status';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExportStatus', $response);
    return $_response_object;
}

#
# events_export_post
#
# Export Events
#
# @param ARRAY[EventType] $event_types Types of Events to return (optional)
# @param DateTime $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
# @param DateTime $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
# @param ExportFileFormats $file_format Format of the exported file (optional)
# @param CompressionFormat $compression_format FileResponse compression format. None or Zip. (optional)
# @param string $file_name Name of your file including extension. (optional)
{
    my $params = {
    'event_types' => {
        data_type => 'ARRAY[EventType]',
        description => 'Types of Events to return',
        required => '0',
    },
    'from' => {
        data_type => 'DateTime',
        description => 'Starting date for search in YYYY-MM-DDThh:mm:ss format.',
        required => '0',
    },
    'to' => {
        data_type => 'DateTime',
        description => 'Ending date for search in YYYY-MM-DDThh:mm:ss format.',
        required => '0',
    },
    'file_format' => {
        data_type => 'ExportFileFormats',
        description => 'Format of the exported file',
        required => '0',
    },
    'compression_format' => {
        data_type => 'CompressionFormat',
        description => 'FileResponse compression format. None or Zip.',
        required => '0',
    },
    'file_name' => {
        data_type => 'string',
        description => 'Name of your file including extension.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'events_export_post' } = {
        summary => 'Export Events',
        params => $params,
        returns => 'ExportLink',
        };
}
# @return ExportLink
#
sub events_export_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/events/export';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'event_types'}) {
        $query_params->{'eventTypes'} = $self->{api_client}->to_query_value($args{'event_types'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'file_format'}) {
        $query_params->{'fileFormat'} = $self->{api_client}->to_query_value($args{'file_format'});
    }

    # query params
    if ( exists $args{'compression_format'}) {
        $query_params->{'compressionFormat'} = $self->{api_client}->to_query_value($args{'compression_format'});
    }

    # query params
    if ( exists $args{'file_name'}) {
        $query_params->{'fileName'} = $self->{api_client}->to_query_value($args{'file_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExportLink', $response);
    return $_response_object;
}

#
# events_get
#
# Load Events
#
# @param ARRAY[EventType] $event_types Types of Events to return (optional)
# @param DateTime $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
# @param DateTime $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
# @param EventsOrderBy $order_by  (optional)
# @param int $limit How many items to load. Maximum for this request is 1000 items (optional)
# @param int $offset How many items should be returned ahead. (optional)
{
    my $params = {
    'event_types' => {
        data_type => 'ARRAY[EventType]',
        description => 'Types of Events to return',
        required => '0',
    },
    'from' => {
        data_type => 'DateTime',
        description => 'Starting date for search in YYYY-MM-DDThh:mm:ss format.',
        required => '0',
    },
    'to' => {
        data_type => 'DateTime',
        description => 'Ending date for search in YYYY-MM-DDThh:mm:ss format.',
        required => '0',
    },
    'order_by' => {
        data_type => 'EventsOrderBy',
        description => '',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many items to load. Maximum for this request is 1000 items',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'How many items should be returned ahead.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'events_get' } = {
        summary => 'Load Events',
        params => $params,
        returns => 'ARRAY[RecipientEvent]',
        };
}
# @return ARRAY[RecipientEvent]
#
sub events_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/events';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'event_types'}) {
        $query_params->{'eventTypes'} = $self->{api_client}->to_query_value($args{'event_types'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[RecipientEvent]', $response);
    return $_response_object;
}

1;
