=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ElasticEmail::SubAccountsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ElasticEmail::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'ElasticEmail::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = ElasticEmail::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# subaccounts_by_email_credits_patch
#
# Add, Subtract Email Credits
#
# @param string $email Email address of Sub-Account (required)
# @param SubaccountEmailCreditsPayload $subaccount_email_credits_payload Amount of email credits to add or subtract from the current SubAccount email credits pool (positive or negative value) (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Email address of Sub-Account',
        required => '1',
    },
    'subaccount_email_credits_payload' => {
        data_type => 'SubaccountEmailCreditsPayload',
        description => 'Amount of email credits to add or subtract from the current SubAccount email credits pool (positive or negative value)',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'subaccounts_by_email_credits_patch' } = {
        summary => 'Add, Subtract Email Credits',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub subaccounts_by_email_credits_patch {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling subaccounts_by_email_credits_patch");
    }

    # verify the required parameter 'subaccount_email_credits_payload' is set
    unless (exists $args{'subaccount_email_credits_payload'}) {
      croak("Missing the required parameter 'subaccount_email_credits_payload' when calling subaccounts_by_email_credits_patch");
    }

    # parse inputs
    my $_resource_path = '/subaccounts/{email}/credits';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'subaccount_email_credits_payload'}) {
        $_body_data = $args{'subaccount_email_credits_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# subaccounts_by_email_delete
#
# Delete SubAccount
#
# @param string $email Email address of Sub-Account (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Email address of Sub-Account',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'subaccounts_by_email_delete' } = {
        summary => 'Delete SubAccount',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub subaccounts_by_email_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling subaccounts_by_email_delete");
    }

    # parse inputs
    my $_resource_path = '/subaccounts/{email}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# subaccounts_by_email_get
#
# Load SubAccount
#
# @param string $email Email address of Sub-Account (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Email address of Sub-Account',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'subaccounts_by_email_get' } = {
        summary => 'Load SubAccount',
        params => $params,
        returns => 'SubAccountInfo',
        };
}
# @return SubAccountInfo
#
sub subaccounts_by_email_get {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling subaccounts_by_email_get");
    }

    # parse inputs
    my $_resource_path = '/subaccounts/{email}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SubAccountInfo', $response);
    return $_response_object;
}

#
# subaccounts_by_email_settings_email_put
#
# Update SubAccount Email Settings
#
# @param string $email  (required)
# @param SubaccountEmailSettings $subaccount_email_settings Updated Email Settings (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'subaccount_email_settings' => {
        data_type => 'SubaccountEmailSettings',
        description => 'Updated Email Settings',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'subaccounts_by_email_settings_email_put' } = {
        summary => 'Update SubAccount Email Settings',
        params => $params,
        returns => 'SubaccountEmailSettings',
        };
}
# @return SubaccountEmailSettings
#
sub subaccounts_by_email_settings_email_put {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling subaccounts_by_email_settings_email_put");
    }

    # verify the required parameter 'subaccount_email_settings' is set
    unless (exists $args{'subaccount_email_settings'}) {
      croak("Missing the required parameter 'subaccount_email_settings' when calling subaccounts_by_email_settings_email_put");
    }

    # parse inputs
    my $_resource_path = '/subaccounts/{email}/settings/email';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'subaccount_email_settings'}) {
        $_body_data = $args{'subaccount_email_settings'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SubaccountEmailSettings', $response);
    return $_response_object;
}

#
# subaccounts_get
#
# Load SubAccounts
#
# @param int $limit Maximum number of returned items. (optional)
# @param int $offset How many items should be returned ahead. (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'Maximum number of returned items.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'How many items should be returned ahead.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'subaccounts_get' } = {
        summary => 'Load SubAccounts',
        params => $params,
        returns => 'ARRAY[SubAccountInfo]',
        };
}
# @return ARRAY[SubAccountInfo]
#
sub subaccounts_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/subaccounts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SubAccountInfo]', $response);
    return $_response_object;
}

#
# subaccounts_post
#
# Add SubAccount
#
# @param SubaccountPayload $subaccount_payload  (required)
{
    my $params = {
    'subaccount_payload' => {
        data_type => 'SubaccountPayload',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'subaccounts_post' } = {
        summary => 'Add SubAccount',
        params => $params,
        returns => 'SubAccountInfo',
        };
}
# @return SubAccountInfo
#
sub subaccounts_post {
    my ($self, %args) = @_;

    # verify the required parameter 'subaccount_payload' is set
    unless (exists $args{'subaccount_payload'}) {
      croak("Missing the required parameter 'subaccount_payload' when calling subaccounts_post");
    }

    # parse inputs
    my $_resource_path = '/subaccounts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'subaccount_payload'}) {
        $_body_data = $args{'subaccount_payload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SubAccountInfo', $response);
    return $_response_object;
}

1;
