=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ElasticEmail::VerificationsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ElasticEmail::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'ElasticEmail::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = ElasticEmail::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# verifications_by_email_delete
#
# Delete Email Verification Result
# 
# @param string $email Email address to verification (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Email address to verification',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'verifications_by_email_delete' } = { 
        summary => 'Delete Email Verification Result',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub verifications_by_email_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling verifications_by_email_delete");
    }

    # parse inputs
    my $_resource_path = '/verifications/{email}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# verifications_by_email_get
#
# Get Email Verification Result
# 
# @param string $email Email address to view verification result of (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Email address to view verification result of',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'verifications_by_email_get' } = { 
        summary => 'Get Email Verification Result',
        params => $params,
        returns => 'EmailValidationResult',
        };
}
# @return EmailValidationResult
#
sub verifications_by_email_get {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling verifications_by_email_get");
    }

    # parse inputs
    my $_resource_path = '/verifications/{email}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailValidationResult', $response);
    return $_response_object;
}

#
# verifications_by_email_post
#
# Verify Email
# 
# @param string $email Email address to verify (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Email address to verify',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'verifications_by_email_post' } = { 
        summary => 'Verify Email',
        params => $params,
        returns => 'EmailValidationResult',
        };
}
# @return EmailValidationResult
#
sub verifications_by_email_post {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling verifications_by_email_post");
    }

    # parse inputs
    my $_resource_path = '/verifications/{email}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EmailValidationResult', $response);
    return $_response_object;
}

#
# verifications_files_by_id_delete
#
# Delete File Verification Result
# 
# @param string $id ID of the exported file (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of the exported file',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'verifications_files_by_id_delete' } = { 
        summary => 'Delete File Verification Result',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub verifications_files_by_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling verifications_files_by_id_delete");
    }

    # parse inputs
    my $_resource_path = '/verifications/files/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# verifications_files_by_id_result_download_get
#
# Download File Verification Result
# 
# @param string $id Verification ID to download (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Verification ID to download',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'verifications_files_by_id_result_download_get' } = { 
        summary => 'Download File Verification Result',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub verifications_files_by_id_result_download_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling verifications_files_by_id_result_download_get");
    }

    # parse inputs
    my $_resource_path = '/verifications/files/{id}/result/download';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# verifications_files_by_id_result_get
#
# Get Detailed File Verification Result
# 
# @param string $id ID of the Verification to display status of (required)
# @param int $limit Maximum number of returned email verification results (optional)
# @param int $offset How many result items should be returned ahead (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'ID of the Verification to display status of',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'Maximum number of returned email verification results',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'How many result items should be returned ahead',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'verifications_files_by_id_result_get' } = { 
        summary => 'Get Detailed File Verification Result',
        params => $params,
        returns => 'VerificationFileResultDetails',
        };
}
# @return VerificationFileResultDetails
#
sub verifications_files_by_id_result_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling verifications_files_by_id_result_get");
    }

    # parse inputs
    my $_resource_path = '/verifications/files/{id}/result';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('VerificationFileResultDetails', $response);
    return $_response_object;
}

#
# verifications_files_by_id_verification_post
#
# Start verification
# 
# @param string $id File ID to start verification (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'File ID to start verification',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'verifications_files_by_id_verification_post' } = { 
        summary => 'Start verification',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub verifications_files_by_id_verification_post {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling verifications_files_by_id_verification_post");
    }

    # parse inputs
    my $_resource_path = '/verifications/files/{id}/verification';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# verifications_files_post
#
# Upload File with Emails
# 
# @param string $file  (optional)
{
    my $params = {
    'file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'verifications_files_post' } = { 
        summary => 'Upload File with Emails',
        params => $params,
        returns => 'VerificationFileResult',
        };
}
# @return VerificationFileResult
#
sub verifications_files_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/verifications/files';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('VerificationFileResult', $response);
    return $_response_object;
}

#
# verifications_files_result_get
#
# Get Files Verification Results
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'verifications_files_result_get' } = { 
        summary => 'Get Files Verification Results',
        params => $params,
        returns => 'ARRAY[VerificationFileResult]',
        };
}
# @return ARRAY[VerificationFileResult]
#
sub verifications_files_result_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/verifications/files/result';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[VerificationFileResult]', $response);
    return $_response_object;
}

#
# verifications_get
#
# Get Emails Verification Results
# 
# @param int $limit Maximum number of returned items. (optional)
# @param int $offset How many items should be returned ahead. (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'Maximum number of returned items.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'How many items should be returned ahead.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'verifications_get' } = { 
        summary => 'Get Emails Verification Results',
        params => $params,
        returns => 'ARRAY[EmailValidationResult]',
        };
}
# @return ARRAY[EmailValidationResult]
#
sub verifications_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/verifications';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[EmailValidationResult]', $response);
    return $_response_object;
}

1;
