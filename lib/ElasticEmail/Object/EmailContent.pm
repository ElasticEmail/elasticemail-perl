=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ElasticEmail::Object::EmailContent;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use ElasticEmail::Object::BodyPart;
use ElasticEmail::Object::MessageAttachment;
use ElasticEmail::Object::Utm;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#Proper e-mail content
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "ElasticEmail::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => 'Proper e-mail content',
                                  class => 'EmailContent',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'body' => {
        datatype => 'ARRAY[BodyPart]',
        base_name => 'Body',
        description => 'List of e-mail body parts, with user-provided MIME types (text/html, text/plain etc)',
        format => '',
        read_only => '',
            },
    'merge' => {
        datatype => 'HASH[string,string]',
        base_name => 'Merge',
        description => 'A key-value collection of custom merge fields, shared between recipients. Should be used in e-mail body like so: {firstname}, {lastname} etc.',
        format => '',
        read_only => '',
            },
    'attachments' => {
        datatype => 'ARRAY[MessageAttachment]',
        base_name => 'Attachments',
        description => 'Attachments provided by sending binary data',
        format => '',
        read_only => '',
            },
    'headers' => {
        datatype => 'HASH[string,string]',
        base_name => 'Headers',
        description => 'A key-value collection of custom e-mail headers.',
        format => '',
        read_only => '',
            },
    'postback' => {
        datatype => 'string',
        base_name => 'Postback',
        description => 'Postback header.',
        format => '',
        read_only => '',
            },
    'envelope_from' => {
        datatype => 'string',
        base_name => 'EnvelopeFrom',
        description => 'E-mail with an optional name to be used as the envelope from address (e.g.: John Doe &lt;email@domain.com&gt;)',
        format => '',
        read_only => '',
            },
    'from' => {
        datatype => 'string',
        base_name => 'From',
        description => 'Your e-mail with an optional name (e.g.: John Doe &lt;email@domain.com&gt;)',
        format => '',
        read_only => '',
            },
    'reply_to' => {
        datatype => 'string',
        base_name => 'ReplyTo',
        description => 'To what address should the recipients reply to (e.g. John Doe &lt;email@domain.com&gt;)',
        format => '',
        read_only => '',
            },
    'subject' => {
        datatype => 'string',
        base_name => 'Subject',
        description => 'Default subject of email.',
        format => '',
        read_only => '',
            },
    'template_name' => {
        datatype => 'string',
        base_name => 'TemplateName',
        description => 'Name of template.',
        format => '',
        read_only => '',
            },
    'attach_files' => {
        datatype => 'ARRAY[string]',
        base_name => 'AttachFiles',
        description => 'Names of previously uploaded files that should be sent as downloadable attachments',
        format => '',
        read_only => '',
            },
    'utm' => {
        datatype => 'Utm',
        base_name => 'Utm',
        description => '',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'body' => 'ARRAY[BodyPart]',
    'merge' => 'HASH[string,string]',
    'attachments' => 'ARRAY[MessageAttachment]',
    'headers' => 'HASH[string,string]',
    'postback' => 'string',
    'envelope_from' => 'string',
    'from' => 'string',
    'reply_to' => 'string',
    'subject' => 'string',
    'template_name' => 'string',
    'attach_files' => 'ARRAY[string]',
    'utm' => 'Utm'
} );

__PACKAGE__->attribute_map( {
    'body' => 'Body',
    'merge' => 'Merge',
    'attachments' => 'Attachments',
    'headers' => 'Headers',
    'postback' => 'Postback',
    'envelope_from' => 'EnvelopeFrom',
    'from' => 'From',
    'reply_to' => 'ReplyTo',
    'subject' => 'Subject',
    'template_name' => 'TemplateName',
    'attach_files' => 'AttachFiles',
    'utm' => 'Utm'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
