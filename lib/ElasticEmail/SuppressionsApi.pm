=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package ElasticEmail::SuppressionsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use ElasticEmail::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'ElasticEmail::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = ElasticEmail::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# suppressions_bounces_get
#
# Get Bounce List
#
# @param string $search Text fragment used for searching. (optional)
# @param int $limit Maximum number of returned items. (optional)
# @param int $offset How many items should be returned ahead. (optional)
{
    my $params = {
    'search' => {
        data_type => 'string',
        description => 'Text fragment used for searching.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Maximum number of returned items.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'How many items should be returned ahead.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_bounces_get' } = {
        summary => 'Get Bounce List',
        params => $params,
        returns => 'ARRAY[Suppression]',
        };
}
# @return ARRAY[Suppression]
#
sub suppressions_bounces_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/suppressions/bounces';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Suppression]', $response);
    return $_response_object;
}

#
# suppressions_bounces_import_post
#
# Add Bounces Async
#
# @param string $file  (optional)
{
    my $params = {
    'file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_bounces_import_post' } = {
        summary => 'Add Bounces Async',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub suppressions_bounces_import_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/suppressions/bounces/import';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# suppressions_bounces_post
#
# Add Bounces
#
# @param ARRAY[string] $request_body Emails to add as bounces. Limited to 1000 per request (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Emails to add as bounces. Limited to 1000 per request',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_bounces_post' } = {
        summary => 'Add Bounces',
        params => $params,
        returns => 'ARRAY[Suppression]',
        };
}
# @return ARRAY[Suppression]
#
sub suppressions_bounces_post {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling suppressions_bounces_post");
    }

    # parse inputs
    my $_resource_path = '/suppressions/bounces';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Suppression]', $response);
    return $_response_object;
}

#
# suppressions_by_email_delete
#
# Delete Suppression
#
# @param string $email Proper email address. (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Proper email address.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_by_email_delete' } = {
        summary => 'Delete Suppression',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub suppressions_by_email_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling suppressions_by_email_delete");
    }

    # parse inputs
    my $_resource_path = '/suppressions/{email}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# suppressions_by_email_get
#
# Get Suppression
#
# @param string $email Proper email address. (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Proper email address.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_by_email_get' } = {
        summary => 'Get Suppression',
        params => $params,
        returns => 'Suppression',
        };
}
# @return Suppression
#
sub suppressions_by_email_get {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling suppressions_by_email_get");
    }

    # parse inputs
    my $_resource_path = '/suppressions/{email}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Suppression', $response);
    return $_response_object;
}

#
# suppressions_complaints_get
#
# Get Complaints List
#
# @param string $search Text fragment used for searching. (optional)
# @param int $limit Maximum number of returned items. (optional)
# @param int $offset How many items should be returned ahead. (optional)
{
    my $params = {
    'search' => {
        data_type => 'string',
        description => 'Text fragment used for searching.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Maximum number of returned items.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'How many items should be returned ahead.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_complaints_get' } = {
        summary => 'Get Complaints List',
        params => $params,
        returns => 'ARRAY[Suppression]',
        };
}
# @return ARRAY[Suppression]
#
sub suppressions_complaints_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/suppressions/complaints';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Suppression]', $response);
    return $_response_object;
}

#
# suppressions_complaints_import_post
#
# Add Complaints Async
#
# @param string $file  (optional)
{
    my $params = {
    'file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_complaints_import_post' } = {
        summary => 'Add Complaints Async',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub suppressions_complaints_import_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/suppressions/complaints/import';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# suppressions_complaints_post
#
# Add Complaints
#
# @param ARRAY[string] $request_body Emails to add as complaints. Limited to 1000 per request (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Emails to add as complaints. Limited to 1000 per request',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_complaints_post' } = {
        summary => 'Add Complaints',
        params => $params,
        returns => 'ARRAY[Suppression]',
        };
}
# @return ARRAY[Suppression]
#
sub suppressions_complaints_post {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling suppressions_complaints_post");
    }

    # parse inputs
    my $_resource_path = '/suppressions/complaints';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Suppression]', $response);
    return $_response_object;
}

#
# suppressions_get
#
# Get Suppressions
#
# @param int $limit Maximum number of returned items. (optional)
# @param int $offset How many items should be returned ahead. (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'Maximum number of returned items.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'How many items should be returned ahead.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_get' } = {
        summary => 'Get Suppressions',
        params => $params,
        returns => 'ARRAY[Suppression]',
        };
}
# @return ARRAY[Suppression]
#
sub suppressions_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/suppressions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Suppression]', $response);
    return $_response_object;
}

#
# suppressions_unsubscribes_get
#
# Get Unsubscribes List
#
# @param string $search Text fragment used for searching. (optional)
# @param int $limit Maximum number of returned items. (optional)
# @param int $offset How many items should be returned ahead. (optional)
{
    my $params = {
    'search' => {
        data_type => 'string',
        description => 'Text fragment used for searching.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Maximum number of returned items.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'How many items should be returned ahead.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_unsubscribes_get' } = {
        summary => 'Get Unsubscribes List',
        params => $params,
        returns => 'ARRAY[Suppression]',
        };
}
# @return ARRAY[Suppression]
#
sub suppressions_unsubscribes_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/suppressions/unsubscribes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search'}) {
        $query_params->{'search'} = $self->{api_client}->to_query_value($args{'search'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Suppression]', $response);
    return $_response_object;
}

#
# suppressions_unsubscribes_import_post
#
# Add Unsubscribes Async
#
# @param string $file  (optional)
{
    my $params = {
    'file' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_unsubscribes_import_post' } = {
        summary => 'Add Unsubscribes Async',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub suppressions_unsubscribes_import_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/suppressions/unsubscribes/import';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# suppressions_unsubscribes_post
#
# Add Unsubscribes
#
# @param ARRAY[string] $request_body Emails to add as unsubscribes. Limited to 1000 per request (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Emails to add as unsubscribes. Limited to 1000 per request',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'suppressions_unsubscribes_post' } = {
        summary => 'Add Unsubscribes',
        params => $params,
        returns => 'ARRAY[Suppression]',
        };
}
# @return ARRAY[Suppression]
#
sub suppressions_unsubscribes_post {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling suppressions_unsubscribes_post");
    }

    # parse inputs
    my $_resource_path = '/suppressions/unsubscribes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apikey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Suppression]', $response);
    return $_response_object;
}

1;
