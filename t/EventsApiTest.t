=begin comment

Elastic Email REST API

This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator
# Please update the test cases below to test the API endpoints.
# Ref: https://openapi-generator.tech
#
use Test::More;
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('ElasticEmail::EventsApi');

my $api = ElasticEmail::EventsApi->new();
isa_ok($api, 'ElasticEmail::EventsApi');

#
# events_by_transactionid_get test
#
# uncomment below and update the test
#my $events_by_transactionid_get_transactionid = undef; # replace NULL with a proper value
#my $events_by_transactionid_get_from = undef; # replace NULL with a proper value
#my $events_by_transactionid_get_to = undef; # replace NULL with a proper value
#my $events_by_transactionid_get_order_by = undef; # replace NULL with a proper value
#my $events_by_transactionid_get_limit = undef; # replace NULL with a proper value
#my $events_by_transactionid_get_offset = undef; # replace NULL with a proper value
#my $events_by_transactionid_get_result = $api->events_by_transactionid_get(transactionid => $events_by_transactionid_get_transactionid, from => $events_by_transactionid_get_from, to => $events_by_transactionid_get_to, order_by => $events_by_transactionid_get_order_by, limit => $events_by_transactionid_get_limit, offset => $events_by_transactionid_get_offset);

#
# events_channels_by_name_export_post test
#
# uncomment below and update the test
#my $events_channels_by_name_export_post_name = undef; # replace NULL with a proper value
#my $events_channels_by_name_export_post_event_types = undef; # replace NULL with a proper value
#my $events_channels_by_name_export_post_from = undef; # replace NULL with a proper value
#my $events_channels_by_name_export_post_to = undef; # replace NULL with a proper value
#my $events_channels_by_name_export_post_file_format = undef; # replace NULL with a proper value
#my $events_channels_by_name_export_post_compression_format = undef; # replace NULL with a proper value
#my $events_channels_by_name_export_post_file_name = undef; # replace NULL with a proper value
#my $events_channels_by_name_export_post_result = $api->events_channels_by_name_export_post(name => $events_channels_by_name_export_post_name, event_types => $events_channels_by_name_export_post_event_types, from => $events_channels_by_name_export_post_from, to => $events_channels_by_name_export_post_to, file_format => $events_channels_by_name_export_post_file_format, compression_format => $events_channels_by_name_export_post_compression_format, file_name => $events_channels_by_name_export_post_file_name);

#
# events_channels_by_name_get test
#
# uncomment below and update the test
#my $events_channels_by_name_get_name = undef; # replace NULL with a proper value
#my $events_channels_by_name_get_event_types = undef; # replace NULL with a proper value
#my $events_channels_by_name_get_from = undef; # replace NULL with a proper value
#my $events_channels_by_name_get_to = undef; # replace NULL with a proper value
#my $events_channels_by_name_get_order_by = undef; # replace NULL with a proper value
#my $events_channels_by_name_get_limit = undef; # replace NULL with a proper value
#my $events_channels_by_name_get_offset = undef; # replace NULL with a proper value
#my $events_channels_by_name_get_result = $api->events_channels_by_name_get(name => $events_channels_by_name_get_name, event_types => $events_channels_by_name_get_event_types, from => $events_channels_by_name_get_from, to => $events_channels_by_name_get_to, order_by => $events_channels_by_name_get_order_by, limit => $events_channels_by_name_get_limit, offset => $events_channels_by_name_get_offset);

#
# events_channels_export_by_id_status_get test
#
# uncomment below and update the test
#my $events_channels_export_by_id_status_get_id = undef; # replace NULL with a proper value
#my $events_channels_export_by_id_status_get_result = $api->events_channels_export_by_id_status_get(id => $events_channels_export_by_id_status_get_id);

#
# events_export_by_id_status_get test
#
# uncomment below and update the test
#my $events_export_by_id_status_get_id = undef; # replace NULL with a proper value
#my $events_export_by_id_status_get_result = $api->events_export_by_id_status_get(id => $events_export_by_id_status_get_id);

#
# events_export_post test
#
# uncomment below and update the test
#my $events_export_post_event_types = undef; # replace NULL with a proper value
#my $events_export_post_from = undef; # replace NULL with a proper value
#my $events_export_post_to = undef; # replace NULL with a proper value
#my $events_export_post_file_format = undef; # replace NULL with a proper value
#my $events_export_post_compression_format = undef; # replace NULL with a proper value
#my $events_export_post_file_name = undef; # replace NULL with a proper value
#my $events_export_post_result = $api->events_export_post(event_types => $events_export_post_event_types, from => $events_export_post_from, to => $events_export_post_to, file_format => $events_export_post_file_format, compression_format => $events_export_post_compression_format, file_name => $events_export_post_file_name);

#
# events_get test
#
# uncomment below and update the test
#my $events_get_event_types = undef; # replace NULL with a proper value
#my $events_get_from = undef; # replace NULL with a proper value
#my $events_get_to = undef; # replace NULL with a proper value
#my $events_get_order_by = undef; # replace NULL with a proper value
#my $events_get_limit = undef; # replace NULL with a proper value
#my $events_get_offset = undef; # replace NULL with a proper value
#my $events_get_result = $api->events_get(event_types => $events_get_event_types, from => $events_get_from, to => $events_get_to, order_by => $events_get_order_by, limit => $events_get_limit, offset => $events_get_offset);


done_testing();
